name: E2E Test
env:
  RECORD_REPLAY_CHROMIUM_DOWNLOAD_FILE: linux-chromium-20221231-e9016f403e43-088e58bdeb5c.tar.xz
on: 
  schedule:
    - cron: '0 * * * *'
  push:
  workflow_dispatch:

jobs:
  record:
    name: Run Chrome Tests (record)
    outputs:
      recordDuration: ${{steps.end.outputs.recordDuration}}
      uploadDuration: ${{steps.end.outputs.uploadDuration}}
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v1

      # Setup Node.js build environment
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.18.1

      # # Cache dependencies
      # - name: Cache Dependencies
      #   uses: actions/cache@v2
      #   id: cache
      #   with:
      #     path: |
      #       **/node_modules
      #     key: yarn-${{ hashFiles('**/package.json', 'yarn.lock') }}

      # Install project dependencies
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - uses: bahmutov/npm-install@v1
        env:
          CYPRESS_INSTALL_BINARY: 0
      # confirm there is no Cypress installed
      - run: yarn cypress cache path
      # should return empty list of installed versions
      - run: yarn cypress cache list
      # restore / cache the binary ourselves on Linux
      # see https://github.com/actions/cache
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
      # now let's install Cypress binary
      - run: yarn cypress install
      - run: yarn cypress cache list

      - name: Build
        run: yarn build

      # Run Cypress
      - name: Run Tests
        run: yarn test:cy:ci:replay
        env:
          RECORD_REPLAY_TEST_METRICS: 1
          RECORD_REPLAY_WEBHOOK_URL: ${{ secrets.RECORD_REPLAY_WEBHOOK_URL }}
          RECORD_ALL_CONTENT: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata
          # These two are here to help with measuring the true overhead by disabling diagnostics
          RECORD_REPLAY_DISABLE_ASSERTS: 1
          RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION: 1

      - name: Parse test run duration
        id: set_var
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
          
      - name: Set upload start
        if: always()
        id: uploadStart
        run: echo "time=`date +%s`" >> $GITHUB_OUTPUT

      - name: Upload replays
        if: ${{ always() }}
        uses: replayio/action-upload@v0.4.3
        with:
          public: true
          api-key: rwk_olNdDXxABSag4FeFWPR1uuxHojx5fpGycskz29bwJqG

      - name: Set duration in output
        if: always()
        id: end
        run: | 
          echo "recordDuration=${{fromJson(steps.set_var.outputs.duration)}}" >> $GITHUB_OUTPUT
          echo "uploadDuration=$(((`date +%s` - ${{ steps.uploadStart.outputs.time }}) * 1000))" >> $GITHUB_OUTPUT

  no-record:
    name: Run Chrome Tests (no record)
    runs-on: ubuntu-latest
    outputs:
      noRecordDuration: ${{steps.end.outputs.noRecordDuration}}

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v1

      # Setup Node.js build environment
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.18.1

      # # Cache dependencies
      # - name: Cache Dependencies
      #   uses: actions/cache@v2
      #   id: cache
      #   with:
      #     path: |
      #       **/node_modules
      #     key: yarn-${{ hashFiles('**/package.json', 'yarn.lock') }}

      # Install project dependencies
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - uses: bahmutov/npm-install@v1
        env:
          CYPRESS_INSTALL_BINARY: 0
      # confirm there is no Cypress installed
      - run: yarn cypress cache path
      # should return empty list of installed versions
      - run: yarn cypress cache list
      # restore / cache the binary ourselves on Linux
      # see https://github.com/actions/cache
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
      # now let's install Cypress binary
      - run: yarn cypress install
      - run: yarn cypress cache list

      - name: Build
        run: yarn build

      # Run Cypress
      - name: Run Tests
        run: yarn test:cy:ci:replay
        env:
          RECORD_REPLAY_TEST_METRICS: 1
          RECORD_REPLAY_WEBHOOK_URL: ${{ secrets.RECORD_REPLAY_WEBHOOK_URL }}
          RECORD_ALL_CONTENT: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata
          RECORD_REPLAY_DRIVER: /tmp/not-here
          # These two are here to help with measuring the true overhead by disabling diagnostics
          RECORD_REPLAY_DISABLE_ASSERTS: 1
          RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION: 1

      - name: Parse test run duration
        id: set_var
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"

      - name: Set duration in output
        if: always()
        id: end
        run: echo "noRecordDuration=${{fromJson(steps.set_var.outputs.duration)}}" >> $GITHUB_OUTPUT

  original:
    name: Run Chrome Tests (original)
    runs-on: ubuntu-latest
    outputs:
      originalDuration: ${{steps.end.outputs.originalDuration}}

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v1

      # Setup Node.js build environment
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14.18.1

      # # Cache dependencies
      # - name: Cache Dependencies
      #   uses: actions/cache@v2
      #   id: cache
      #   with:
      #     path: |
      #       **/node_modules
      #     key: yarn-${{ hashFiles('**/package.json', 'yarn.lock') }}

      # Install project dependencies
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - uses: bahmutov/npm-install@v1
        env:
          CYPRESS_INSTALL_BINARY: 0
      # confirm there is no Cypress installed
      - run: yarn cypress cache path
      # should return empty list of installed versions
      - run: yarn cypress cache list
      # restore / cache the binary ourselves on Linux
      # see https://github.com/actions/cache
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
      # now let's install Cypress binary
      - run: yarn cypress install
      - run: yarn cypress cache list

      - name: Build
        run: yarn build

      - name: Set test start
        if: always()
        id: start
        run: echo "time=`date +%s`" >> $GITHUB_OUTPUT

      # Run Cypress
      - name: Run Tests
        run: yarn test:cy:ci:chrome

      - name: Parse test run duration
        id: set_var
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"

      - name: Set duration in output
        if: always()
        id: end
        run: echo "originalDuration=${{fromJson(steps.set_var.outputs.duration)}}" >> $GITHUB_OUTPUT

  upload-benchmarks:
    name: Upload benchmarks
    runs-on: ubuntu-latest
    needs: [record, no-record, original]
    if: always()
    steps:
      - run: |
          echo "Record Duration: ${{ needs.record.outputs.recordDuration }}"
          echo "No Record Duration: ${{ needs.no-record.outputs.noRecordDuration }}"
          echo "Original Duration: ${{ needs.original.outputs.originalDuration }}"
          echo "Upload Duration: ${{ needs.record.outputs.uploadDuration }}"
      - name: Fetch API Data ðŸ“¦
        uses: JamesIves/fetch-api-data-action@v2
        # Don't upload metrics for pull requests, so our stats are clean
        if: ${{ github.ref_name == 'master' }}
        with:
          endpoint: "https://telemetry.replay.io"
          # Make sure to append the correct project name in the JSON below
          configuration: '{ "method": "POST", "body": {"event": "Webhook", "source": "metrics", "name": "action-finished-2", "project": "shepherd", "originalDuration": "${{ needs.original.outputs.originalDuration }}", "recordDuration": "${{ needs.record.outputs.recordDuration }}", "noRecordDuration": "${{ needs.no-record.outputs.noRecordDuration }}", "uploadDuration": "${{ needs.record.outputs.uploadDuration }}"} }'

